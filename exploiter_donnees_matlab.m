clc

load('test_FxFy_3.mat', 'Fx')
load('test_FxFy_3.mat', 'Fy')
load('test_FxFy_3.mat', 'Tstart')
load('test_FxFy_3.mat', 'Tinterval')

% Time is 1 second
t = linspace (0, 1, 3056);

WEL = false;
rail = false;
perlite = true;
martensite = true;

% yyaxis left
% plot(t, Fx)
% xlabel('Temps (en s)')
% ylabel('Fx (en V)')
% 
% yyaxis right
% plot(t, Fy)
% ylabel('Fy (en V)')

% xlim([1, 10])
% set(gca,'xtick', 1:1:10)
% yyaxis left
% ylim([0, 2])
% set(gca,'ytick', 0:0.2:2)
% yyaxis right
% ylim([0, 2])
% set(gca,'ytick', 0:0.2:2)
% 
% interval_Fx = max(Fx) - min(Fx);
% interval_Fy = max(Fy) - min(Fy);

% Impedance plan


% One point

% load('test_FxFy_3.mat', 'Fx')
% load('test_FxFy_3.mat', 'Fy')
% load('test_FxFy_3.mat', 'Tstart')
% load('test_FxFy_3.mat', 'Tinterval')
% 
% f1 = figure;
% plot(mean(Fx), mean(Fy), 'o')
% hold on
% plot(0, 0, 'ro') % Plotting red dot at (0,0)
% xlabel('Fx (en V)')
% ylabel('Fy (en V)')
% grid on
% xlim([-max(abs(Fx))-0.5, max(abs(Fx))+0.5])
% ylim([-max(abs(Fy))-0.5, max(abs(Fy))+0.5])

% Nine points

% Define the directory containing the .mat files
% directory = '\Users\lucas\Desktop\PRI\enregistrements\Essais_9_perlite_v2\';

% Define the directories containing the .mat files
directory_perlite = '\Users\lucas\Desktop\PRI\enregistrements\Essais_perlite_ref\perlite\';
directory_martensite = '\Users\lucas\Desktop\PRI\enregistrements\Essais_perlite_ref\martensite\';
directory_WEL = '\Users\lucas\Desktop\PRI\enregistrements\Essais_perlite_ref\WEL\';
directory_rail = '\Users\lucas\Desktop\PRI\enregistrements\Essais_perlite_ref\WEL\';

% test

% directory_martensite = '\Users\lucas\Desktop\PRI\enregistrements\Essais_perlite_ref\rail\';

% test



% Define the filenames of the .mat files
% fileNames = {'test_FxFy_1.mat', 'test_FxFy_2.mat', 'test_FxFy_3.mat', ... 
%              'test_FxFy_4.mat', 'test_FxFy_5.mat', 'test_FxFy_6.mat', ...
%              'test_FxFy_7.mat', 'test_FxFy_8.mat', 'test_FxFy_9.mat'};

% Define the filenames of the .mat files
fileNames_perlite = {'test_FxFy_perlite_1.mat', 'test_FxFy_perlite_2.mat', 'test_FxFy_perlite_3.mat', ... 
             'test_FxFy_perlite_4.mat', 'test_FxFy_perlite_5.mat', 'test_FxFy_perlite_6.mat', ...
             'test_FxFy_perlite_7.mat', 'test_FxFy_perlite_8.mat', 'test_FxFy_perlite_9.mat'};

fileNames_martensite = {'test_FxFy_martensite_1.mat', 'test_FxFy_martensite_2.mat', 'test_FxFy_martensite_3.mat', ... 
             'test_FxFy_martensite_4.mat', 'test_FxFy_martensite_5.mat', 'test_FxFy_martensite_6.mat', ...
             'test_FxFy_martensite_7.mat', 'test_FxFy_martensite_8.mat', 'test_FxFy_martensite_9.mat'};


% Martensite parce que c'est un test

% fileNames_martensite = {'test_FxFy_rail_1.mat', 'test_FxFy_rail_2.mat', 'test_FxFy_rail_3.mat', ... 
%              'test_FxFy_rail_4.mat', 'test_FxFy_rail_5.mat', 'test_FxFy_rail_6.mat', ...
%              'test_FxFy_rail_7.mat', 'test_FxFy_rail_8.mat', 'test_FxFy_rail_9.mat'};

% Fin du test

fileNames_WEL = {'test_FxFy_WEL_3.mat', ... 
             'test_FxFy_WEL_4.mat', 'test_FxFy_WEL_5.mat', 'test_FxFy_WEL_10.mat', ...
             'test_FxFy_WEL_11.mat', 'test_FxFy_WEL_12.mat', 'test_FxFy_WEL_17.mat', 'test_FxFy_WEL_18.mat', 'test_FxFy_WEL_19.mat'};

numbers_WEL = {'3', '4', '5', '10', '11', '12', '17', '18', '19'};


fileNames_rail = {'test_FxFy_WEL_1.mat', ... 
             'test_FxFy_WEL_2.mat', 'test_FxFy_WEL_6.mat', 'test_FxFy_WEL_7.mat', ...
             'test_FxFy_WEL_8.mat', 'test_FxFy_WEL_9.mat', 'test_FxFy_WEL_13.mat', 'test_FxFy_WEL_14.mat', 'test_FxFy_WEL_15.mat'};

numbers_rail = {'1', '2', '6', '7', '8', '9', '13', '14', '15'};


% Create a figure
f1 = figure;
maxFx = 0;
maxFy = 0;

% Initialize a cell array to store the numbers for the legend
% legendLabels = cell(1, numel(fileNames_perlite) + numel(fileNames_martensite));

% PERLITE
meanFx_perlite = zeros(1,numel(fileNames_perlite));
meanFy_perlite = zeros(1,numel(fileNames_perlite));
Z_perlite = zeros(1,numel(fileNames_perlite));
angles_perlite = zeros(1,numel(fileNames_perlite));

% MARTENSITE
meanFx_martensite = zeros(1,numel(fileNames_martensite));
meanFy_martensite = zeros(1,numel(fileNames_martensite));
Z_martensite = zeros(1,numel(fileNames_martensite));
angles_martensite = zeros(1,numel(fileNames_martensite));

% WEL
meanFx_WEL = zeros(1,numel(fileNames_WEL));
meanFy_WEL = zeros(1,numel(fileNames_WEL));
Z_WEL = zeros(1,numel(fileNames_WEL));
angles_WEL = zeros(1,numel(fileNames_WEL));

% RAIL BORDURE
meanFx_rail = zeros(1,numel(fileNames_rail));
meanFy_rail = zeros(1,numel(fileNames_rail));
Z_rail = zeros(1,numel(fileNames_rail));
angles_rail = zeros(1,numel(fileNames_rail));

% Loop through each .mat file
for i = 1:numel(fileNames_perlite)
    % Load the data from the .mat file
    data_perlite = load(fullfile(directory_perlite, fileNames_perlite{i}));
    data_martensite = load(fullfile(directory_martensite, fileNames_martensite{i}));

    if (WEL)

        data_WEL = load(fullfile(directory_WEL, fileNames_WEL{i})); % Load WEL data

        % Extract Fx and Fy from the loaded WEL data
        Fx_WEL = data_WEL.Fx;
        Fy_WEL = data_WEL.Fy;

        % Calculate the mean of Fx and Fy for WEL
        meanFx_WEL(i) = mean(Fx_WEL);
        meanFy_WEL(i) = mean(Fy_WEL);

        % Create Z_WEL
        Z_WEL(i) = meanFx_WEL(i) + 1j*meanFy_WEL(i);
    
        angles_WEL(i) = angle(Z_WEL(i));

        % Plot the mean point for WEL
        plot(meanFx_WEL(i), meanFy_WEL(i), 'ro');
    
        % Add label for each point
        text(meanFx_WEL(i), meanFy_WEL(i), ['wel' numbers_WEL(i)], 'HorizontalAlignment', 'center', 'VerticalAlignment', 'middle');
        
    end

    if (rail)

        data_rail = load(fullfile(directory_rail, fileNames_rail{i})); % Load rail data

        % Extract Fx and Fy from the loaded rail data
        Fx_rail = data_rail.Fx;
        Fy_rail = data_rail.Fy;

        % Calculate the mean of Fx and Fy for rail
        meanFx_rail(i) = mean(Fx_rail);
        meanFy_rail(i) = mean(Fy_rail);

        % Create Z_rail
        Z_rail(i) = meanFx_rail(i) + 1j*meanFy_rail(i);
    
        angles_rail(i) = angle(Z_rail(i));

        % Plot the mean point for rail
        plot(meanFx_rail(i), meanFy_rail(i), 'yo');
    
        % Add label for each point
        text(meanFx_rail(i), meanFy_rail(i), ['rail' numbers_rail(i)], 'HorizontalAlignment', 'center', 'VerticalAlignment', 'middle');
        
    end

    if (perlite)

        % Extract Fx and Fy from the loaded data
        Fx_perlite = data_perlite.Fx;
        Fy_perlite = data_perlite.Fy;
    
        % Calculate the mean of Fx and Fy
        meanFx_perlite(i) = mean(Fx_perlite);
        meanFy_perlite(i) = mean(Fy_perlite);
    
        % Create Z_perlite
        Z_perlite(i) = meanFx_perlite(i) + 1j*meanFy_perlite(i);
    
        angles_perlite(i) = angle(Z_perlite(i));
    
        % Plot the mean point for perlite
        plot(meanFx_perlite(i), meanFy_perlite(i), 'bo');
        hold on;
        
        % Add label for each point
        text(meanFx_perlite(i), meanFy_perlite(i), ['p' num2str(i)], 'HorizontalAlignment', 'center', 'VerticalAlignment', 'middle');

    end

    if (martensite)

        % Extract Fx and Fy from the loaded data
        Fx_martensite = data_martensite.Fx;
        Fy_martensite = data_martensite.Fy;
    
        % Calculate the mean of Fx and Fy
        meanFx_martensite(i) = mean(Fx_martensite);
        meanFy_martensite(i) = mean(Fy_martensite);
    
        % Create Z_martensite
        Z_martensite(i) = meanFx_martensite(i) + 1j*meanFy_martensite(i);
    
        angles_martensite(i) = angle(Z_martensite(i));

        % Plot the mean point for martensite
        plot(meanFx_martensite(i), meanFy_martensite(i), 'go');
     
        % Add label for each point
        text(meanFx_martensite(i), meanFy_martensite(i), ['m' num2str(i)], 'HorizontalAlignment', 'center', 'VerticalAlignment', 'middle');


    end
    

    if (WEL && rail)

        maxFx = max([meanFx_perlite(i), meanFx_martensite(i), meanFx_WEL(i), meanFx_rail(i), maxFx]);
        maxFy = max([meanFy_perlite(i), meanFy_martensite(i), meanFy_WEL(i), meanFy_rail(i), maxFy]);

    elseif (WEL && ~rail)

        maxFx = max([meanFx_perlite(i), meanFx_martensite(i), meanFx_WEL(i), maxFx]);
        maxFy = max([meanFy_perlite(i), meanFy_martensite(i), meanFy_WEL(i), maxFy]);

    else

        maxFx = max([meanFx_perlite(i), meanFx_martensite(i), maxFx]);
        maxFy = max([meanFy_perlite(i), meanFy_martensite(i), maxFy]);

    end


end

% Plot the origin (0,0) as a red dot
plot(0, 0, 'ro');

if (WEL)

    % Pour WEL
    angles_WEL_deg = rad2deg(angle(Z_WEL));
    [min_angle_WEL, pos_min_angle_WEL] = min(angles_WEL_deg);
    [max_angle_WEL, pos_max_angle_WEL] = max(angles_WEL_deg);

    coefficients_WEL_low = polyfit([0, meanFx_WEL(pos_min_angle_WEL)], [0, meanFy_WEL(pos_min_angle_WEL)], 1);
    coefficients_WEL_high = polyfit([0, meanFx_WEL(pos_max_angle_WEL)], [0, meanFy_WEL(pos_max_angle_WEL)], 1);
    
    slope_WEL_low = coefficients_WEL_low(1); % Slope is the first coefficient
    slope_WEL_high = coefficients_WEL_high(1); % Slope is the first coefficient

    % Plot des lignes de régression pour WEL
    Fx_WEL_fit_low = linspace(0, max(meanFx_WEL), 100);
    Fy_WEL_fit_low = polyval(coefficients_WEL_low, Fx_WEL_fit_low);
    plot(Fx_WEL_fit_low, Fy_WEL_fit_low, 'r');
    
    hold on; % Garder le graphique actuel
    
    Fx_WEL_fit_high = linspace(0, max(meanFx_WEL), 100);
    Fy_WEL_fit_high = polyval(coefficients_WEL_high, Fx_WEL_fit_high);
    plot(Fx_WEL_fit_high, Fy_WEL_fit_high, 'r');
    
    % Remplissage de la zone entre les deux lignes de régression pour WEL
    fill([Fx_WEL_fit_low, fliplr(Fx_WEL_fit_high)], ...
         [Fy_WEL_fit_low, fliplr(Fy_WEL_fit_high)], 'r', 'FaceAlpha', 0.3);

    % Affichage de l'angle de phase sur le graphique pour WEL
    text(0.1, 0.1, ['Phase Angle WEL: ', num2str(min_angle_WEL), ' - ', num2str(max_angle_WEL), ' degrees'], 'Color', 'red', 'FontSize', 12);


end

if (rail)

    % Pour rail
    angles_rail_deg = rad2deg(angle(Z_rail));
    [min_angle_rail, pos_min_angle_rail] = min(angles_rail_deg);
    [max_angle_rail, pos_max_angle_rail] = max(angles_rail_deg);

    coefficients_rail_low = polyfit([0, meanFx_rail(pos_min_angle_rail)], [0, meanFy_rail(pos_min_angle_rail)], 1);
    coefficients_rail_high = polyfit([0, meanFx_rail(pos_max_angle_rail)], [0, meanFy_rail(pos_max_angle_rail)], 1);
    
    slope_rail_low = coefficients_rail_low(1); % Slope is the first coefficient
    slope_rail_high = coefficients_rail_high(1); % Slope is the first coefficient

    % Plot des lignes de régression pour rail
    Fx_rail_fit_low = linspace(0, max(meanFx_rail), 100);
    Fy_rail_fit_low = polyval(coefficients_rail_low, Fx_rail_fit_low);
    plot(Fx_rail_fit_low, Fy_rail_fit_low, 'y');
    
    hold on; % Garder le graphique actuel
    
    Fx_rail_fit_high = linspace(0, max(meanFx_rail), 100);
    Fy_rail_fit_high = polyval(coefficients_rail_high, Fx_rail_fit_high);
    plot(Fx_rail_fit_high, Fy_rail_fit_high, 'y');
    
    % Remplissage de la zone entre les deux lignes de régression pour rail
    fill([Fx_rail_fit_low, fliplr(Fx_rail_fit_high)], ...
         [Fy_rail_fit_low, fliplr(Fy_rail_fit_high)], 'y', 'FaceAlpha', 0.3);

    % Affichage de l'angle de phase sur le graphique pour WEL
    text(0.1, 2.5, ['Phase Angle rail: ', num2str(min_angle_rail), ' - ', num2str(max_angle_rail), ' degrees'], 'Color', 'yellow', 'FontSize', 12);


end

% meanFx_perlite = [0, meanFx_perlite];
% meanFy_perlite = [0, meanFy_perlite];
% meanFx_martensite = [0, meanFx_martensite];
% meanFy_martensite = [0, meanFy_martensite];

% Perform linear regression to find the coefficient of direction (slope)
% coefficients_perlite = polyfit(meanFx_perlite, meanFy_perlite, 1);
% slope_perlite = coefficients_perlite(1); % Slope is the first coefficient
% 
% % Perform linear regression to find the coefficient of direction (slope)
% coefficients_martensite = polyfit(meanFx_martensite, meanFy_martensite, 1);
% slope_martensite = coefficients_martensite(1); % Slope is the first coefficient
% 
% % Plot the regression line
% Fx_perlite_fit = linspace(min(meanFx_perlite), max(meanFx_perlite), 100);
% Fy_perlite_fit = polyval(coefficients_perlite, Fx_perlite_fit);
% plot(Fx_perlite_fit, Fy_perlite_fit, 'b');
% 
% % Plot the regression line
% Fx_martensite_fit = linspace(min(meanFx_martensite), max(meanFx_martensite), 100);
% Fy_martensite_fit = polyval(coefficients_martensite, Fx_martensite_fit);
% plot(Fx_martensite_fit, Fy_martensite_fit, 'g');
% 
% % Calculate phase angle perlite
% phase_angle_perlite = rad2deg(atan(slope_perlite));
% 
% % Calculate phase angle martensite
% phase_angle_martensite = rad2deg(atan(slope_martensite));
% 
% % Display the phase angle on the graph
% text(1.5, 2.7, ['Phase Angle Perlite: ', num2str(phase_angle_perlite), ' degrees'], 'Color', 'blue', 'FontSize', 12);
% 
% % Display the phase angle on the graph
% text(1.1, 3.5, ['Phase Angle Martensite: ', num2str(phase_angle_martensite), ' degrees'], 'Color', 'green', 'FontSize', 12);

% DIFFERENT SLOPES

if (perlite)

    [min_angle_perlite, pos_min_angle_perlite] = min(rad2deg(angle(Z_perlite)));
    [max_angle_perlite, pos_max_angle_perlite] = max(rad2deg(angle(Z_perlite)));
    
    coefficients_perlite_low = polyfit([0, meanFx_perlite(pos_min_angle_perlite)], [0, meanFy_perlite(pos_min_angle_perlite)], 1);
    coefficients_perlite_high = polyfit([0, meanFx_perlite(pos_max_angle_perlite)], [0, meanFy_perlite(pos_max_angle_perlite)], 1);
    
    slope_perlite_low = coefficients_perlite_low(1);   % Slope is the first coefficient, not useful anymore
    slope_perlite_high = coefficients_perlite_high(1); % Slope is the first coefficient
    
    % Plot the regression line
    Fx_perlite_fit_low = linspace(0, max(meanFx_perlite), 100);
    Fy_perlite_fit_low = polyval(coefficients_perlite_low, Fx_perlite_fit_low);
    plot(Fx_perlite_fit_low, Fy_perlite_fit_low, 'b');
    
    hold on; % Garder le graphique actuel
    
    Fx_perlite_fit_high = linspace(0, max(meanFx_perlite), 100);
    Fy_perlite_fit_high = polyval(coefficients_perlite_high, Fx_perlite_fit_high);
    plot(Fx_perlite_fit_high, Fy_perlite_fit_high, 'b');
    
    % Remplissage de la zone entre les deux lignes de régression
    fill([Fx_perlite_fit_low, fliplr(Fx_perlite_fit_high)], ...
         [Fy_perlite_fit_low, fliplr(Fy_perlite_fit_high)], 'b', 'FaceAlpha', 0.3);

    % Display the phase angle on the graph
    text(0.1, 2, ['Phase Angle Perlite Triboring : ', num2str(min_angle_perlite), ' - ', num2str(max_angle_perlite), 'degrees'], 'Color', 'blue', 'FontSize', 12);


end

if (martensite)

    [min_angle_martensite, pos_min_angle_martensite] = min(rad2deg(angle(Z_martensite)));
    [max_angle_martensite, pos_max_angle_martensite] = max(rad2deg(angle(Z_martensite)));
    
    coefficients_martensite_low = polyfit([0, meanFx_martensite(pos_min_angle_martensite)], [0, meanFy_martensite(pos_min_angle_martensite)], 1);
    coefficients_martensite_high = polyfit([0, meanFx_martensite(pos_max_angle_martensite)], [0, meanFy_martensite(pos_max_angle_martensite)], 1);
    
    slope_martensite_low = coefficients_martensite_low(1); % Slope is the first coefficient
    slope_martensite_high = coefficients_martensite_high(1); % Slope is the first coefficient
    
    % Plot the regression line;
    
    Fx_martensite_fit_low = linspace(0, max(meanFx_martensite), 100);
    Fy_martensite_fit_low = polyval(coefficients_martensite_low, Fx_martensite_fit_low);
    plot(Fx_martensite_fit_low, Fy_martensite_fit_low, 'g');
    
    hold on; % Garder le graphique actuel
    
    Fx_martensite_fit_high = linspace(0, max(meanFx_martensite), 100);
    Fy_martensite_fit_high = polyval(coefficients_martensite_high, Fx_martensite_fit_high);
    plot(Fx_martensite_fit_high, Fy_martensite_fit_high, 'g');
    
    % Remplissage de la zone entre les deux lignes de régression
    fill([Fx_martensite_fit_low, fliplr(Fx_martensite_fit_high)], ...
         [Fy_martensite_fit_low, fliplr(Fy_martensite_fit_high)], 'g', 'FaceAlpha', 0.3);
     
    hold off; % Libérer le graphique

    % Display the phase angle on the graph
    text(0.1, 1.5, ['Phase Angle Martensite : ', num2str(min_angle_martensite), ' - ', num2str(max_angle_martensite), ' degrees'], 'Color', 'green', 'FontSize', 12);

end

% % Calculate phase angle perlite
% phase_angle_perlite_low = rad2deg(atan(slope_perlite_low));
% phase_angle_perlite_high = rad2deg(atan(slope_perlite_high));
% 
% % Calculate phase angle martensite
% phase_angle_martensite_low = rad2deg(atan(slope_martensite_low));
% phase_angle_martensite_high = rad2deg(atan(slope_martensite_high));


% % Display the slope
% disp(['Slope (perlite): ', num2str(slope_perlite)]);
% 
% % Display the slope
% disp(['Slope (martensite): ', num2str(slope_martensite)]);

% Label the axes
xlabel('Fx (en V)');
ylabel('Fy (en V)');
grid on;

% Set the limits of the plot
xlim([0, maxFx + 0.5]);
ylim([0, maxFy + 0.5]);

% Add legend
% legend(legendLabels, 'Location', 'best');








